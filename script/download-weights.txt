#!/usr/bin/env python


import os
import sys
import torch
from diffusers import StableDiffusionPipeline
from diffusers import (
    AutoencoderKL,
    DDIMScheduler,
    DDPMScheduler,
    StableDiffusionPipeline,
    UNet2DConditionModel,
)

from transformers import CLIPTextModel, CLIPTokenizer


cache_dir = "realistic-vision-v51-cache"
vae_cache_dir = "sd-vae-ft-mse-cache"
os.makedirs(cache_dir, exist_ok=True)
os.makedirs(vae_cache_dir, exist_ok=True)

pipe = StableDiffusionPipeline.from_pretrained(
    "stablediffusionapi/realistic-vision-v51",
    cache_dir=cache_dir,
    revision="fp16",
    torch_dtype=torch.float16,
)

tokenizer = CLIPTokenizer.from_pretrained(
    "stablediffusionapi/realistic-vision-v51",
    subfolder="tokenizer",
    cache_dir=cache_dir,
    revision="fp16",
)

text_encoder = CLIPTextModel.from_pretrained(
    "stablediffusionapi/realistic-vision-v51",
    subfolder="text_encoder",
    cache_dir=cache_dir,
    revision="fp16",
)
vae = AutoencoderKL.from_pretrained(
    "stablediffusionapi/realistic-vision-v51",
    subfolder="vae",
    cache_dir=cache_dir,
    revision="fp16",
)
pretrained_vae = AutoencoderKL.from_pretrained(
    "stabilityai/sd-vae-ft-mse",
    subfolder=None,
    cache_dir=vae_cache_dir,
    revision=None
)
unet = UNet2DConditionModel.from_pretrained(
    "stablediffusionapi/realistic-vision-v51",
    subfolder="unet",
    cache_dir=cache_dir,
    revision="fp16",
)

noise_scheduler = DDPMScheduler.from_config(
    "stablediffusionapi/realistic-vision-v51",
    subfolder="scheduler",
    cache_dir=cache_dir,
)